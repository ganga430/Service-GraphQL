resource "aws_api_gateway_rest_api" "GQLServices-{{lowerCase env}}" {
  name        = "GQLServices-{{lowerCase env}}"
  description = "This is services API for graphql (PUBLIC)"
  tags        = {
    Name = "GQLServices-{{env}}"
    application = "gql"
    environment = "{{env}}"
    businessSponsor = "Hemant Salvi"
  } 
}

resource "aws_api_gateway_resource" "GQLGateway" {
  rest_api_id = aws_api_gateway_rest_api.GQLServices-{{lowerCase env}}.id
  parent_id   = aws_api_gateway_rest_api.GQLServices-{{lowerCase env}}.root_resource_id
  path_part   = "graphql"
}

resource "aws_api_gateway_method" "GQLGatewayMethod" {
  rest_api_id   = aws_api_gateway_rest_api.GQLServices-{{lowerCase env}}.id
  resource_id   = aws_api_gateway_resource.GQLGateway.id
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "GQLGatewayIntegration" {
  rest_api_id             = aws_api_gateway_rest_api.GQLServices-{{lowerCase env}}.id
  resource_id             = aws_api_gateway_resource.GQLGateway.id
  http_method             = aws_api_gateway_method.GQLGatewayMethod.http_method
  type                    = "HTTP_PROXY"
  integration_http_method = "ANY"
  uri                     = "https://$${stageVariables.envAlb}/graphql"
}

resource "aws_api_gateway_deployment" "GQLGatewayDeployment" {
  depends_on = [
    aws_api_gateway_integration.GQLGatewayIntegration,
    {{#each lambdaServices}}
    aws_api_gateway_integration.gql-{{this}}-integration{{#unless @last}},{{/unless}}
    {{/each}}
    {{!-- ,{{#each lambdaServices}}
    aws_lambda_function.{{this}}{{#unless @last}},{{/unless}}
    {{/each}} --}}
  ]

  rest_api_id = aws_api_gateway_rest_api.GQLServices-{{lowerCase env}}.id
  stage_name  = "{{lowerCase env}}"

  variables = {
    "envAlb" = "{{envAlb}}"
    {{#each lambdaServices}}
    "{{camelCase this}}LambdaName"="${aws_lambda_function.{{this}}.function_name}:live"
    {{/each}}
  }

  {{!-- lifecycle {
    create_before_destroy = true
  } --}}
}
